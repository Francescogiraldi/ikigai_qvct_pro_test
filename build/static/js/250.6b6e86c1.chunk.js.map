{"version":3,"file":"static/js/250.6b6e86c1.chunk.js","mappings":"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","sources":["frontend/components/ui/ChatBot.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { AI_CONFIG } from '../../../config';\n\n/**\n * Composant ChatBot unifié qui peut fonctionner en mode réel (API Gradio) ou en mode simulation\n * @param {Object} props - Les propriétés du composant\n * @param {boolean} props.useLocalMode - Si true, utilise des réponses prédéfinies au lieu de l'API Gradio\n * @param {Array} props.predefinedResponses - Tableau de réponses prédéfinies pour le mode local (simulation)\n */\nconst ChatBot = ({ useLocalMode = false, predefinedResponses = [] }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [messages, setMessages] = useState([\n    { \n      role: 'assistant', \n      content: 'Bonjour ! Je suis votre assistant IKIGAI. Comment puis-je vous aider aujourd\\'hui ?'\n    }\n  ]);\n  const [inputMessage, setInputMessage] = useState('');\n  const messagesEndRef = useRef(null);\n  const [gradioClient, setGradioClient] = useState(null);\n\n  // Réponses prédéfinies par défaut pour le mode local\n  const defaultResponses = [\n    \"Le concept d'IKIGAI est un schéma japonais qui vous aide à trouver votre raison d'être en identifiant ce que vous aimez, ce en quoi vous êtes bon, ce pour quoi vous pouvez être payé et ce dont le monde a besoin.\",\n    \"La méditation est une excellente pratique pour réduire le stress et améliorer votre bien-être mental. Essayez de commencer par 5 minutes par jour.\",\n    \"Pour améliorer votre équilibre vie professionnelle/personnelle, essayez de définir des limites claires et de prendre du temps pour des activités qui vous ressourcent.\",\n    \"L'activité physique régulière est un pilier important du bien-être. Même une marche quotidienne de 30 minutes peut faire une grande différence.\",\n    \"La gratitude est une pratique puissante pour améliorer votre bien-être. Essayez de noter trois choses pour lesquelles vous êtes reconnaissant chaque jour.\",\n    \"Une bonne alimentation est fondamentale pour votre bien-être. Essayez d'incorporer plus de fruits, légumes et aliments complets dans votre régime.\",\n    \"Le sommeil est essentiel pour votre santé mentale et physique. Visez 7-8 heures de sommeil de qualité chaque nuit.\",\n    \"Les connections sociales positives sont importantes pour votre bien-être. Prenez le temps de cultiver des relations qui vous soutiennent et vous inspirent.\"\n  ];\n\n  // Utiliser les réponses prédéfinies fournies ou les réponses par défaut\n  const localResponses = predefinedResponses.length > 0 ? predefinedResponses : defaultResponses;\n\n  // État pour suivre si on est forcé en mode local à cause d'une erreur\n  const [forcedLocalMode, setForcedLocalMode] = useState(false);\n  \n  // Détermine si on utilise le mode local (plus de référence à Client qui n'existe plus)\n  const actuallyUseLocalMode = useLocalMode || forcedLocalMode;\n\n  // Initialiser le client Gradio si on n'est pas en mode local\n  useEffect(() => {\n    // Déclaration d'une fonction pour initialiser le client Gradio\n    const initGradioClient = async () => {\n      // Si on est en mode local, on ne fait rien\n      if (actuallyUseLocalMode) return;\n      \n      try {\n        // Importer dynamiquement le client Gradio\n        const gradioModule = await import('@gradio/client');\n        const GradioClient = gradioModule.Client;\n        \n        // Utiliser l'endpoint depuis la configuration centralisée\n        const endpoint = AI_CONFIG.chatbot.apiEndpoint;\n        console.log(\"Tentative de connexion à l'API Gradio:\", endpoint);\n        \n        const client = await GradioClient.connect(endpoint);\n        setGradioClient(client);\n        console.log(\"Connexion au client Gradio réussie\");\n      } catch (error) {\n        console.error(\"Erreur de connexion au client Gradio:\", error);\n        // Si erreur, forcer le mode local\n        setForcedLocalMode(true);\n        // Informer l'utilisateur de ce changement automatique\n        setMessages(prev => [...prev, { \n          role: 'assistant', \n          content: \"Je suis actuellement en mode hors ligne. Je vais utiliser mes connaissances locales pour vous aider.\"\n        }]);\n      }\n    };\n\n    // Si on n'est pas en mode local et que le client Gradio n'a pas encore été initialisé\n    if (!actuallyUseLocalMode && !gradioClient) {\n      initGradioClient();\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [useLocalMode, forcedLocalMode, actuallyUseLocalMode, gradioClient]);\n\n  // Scroll automatique vers le bas quand de nouveaux messages sont ajoutés\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [messages]);\n\n  // Gérer l'envoi de message\n  const handleSendMessage = async () => {\n    if (!inputMessage.trim()) return;\n\n    // Utiliser le message de l'utilisateur\n    const userMessage = { role: 'user', content: inputMessage };\n    const userMessageContent = inputMessage; // Copie du message pour l'utiliser après la réinitialisation du champ\n    \n    // Mettre à jour l'interface utilisateur\n    setMessages(prev => [...prev, userMessage]);\n    setInputMessage('');\n    setIsLoading(true);\n\n    // Déterminer si on utilise le mode local ou l'API Gradio\n    if (actuallyUseLocalMode) {\n      // Mode local avec réponses prédéfinies\n      try {\n        setTimeout(() => {\n          // Choisir une réponse aléatoire\n          const randomResponse = localResponses[Math.floor(Math.random() * localResponses.length)];\n          \n          setMessages(prev => [...prev, { \n            role: 'assistant', \n            content: randomResponse\n          }]);\n          setIsLoading(false);\n        }, 1000); // Reduire légèrement le délai\n      } catch (error) {\n        console.error(\"Erreur inattendue en mode local:\", error);\n        setMessages(prev => [...prev, { \n          role: 'assistant', \n          content: \"Je suis désolé, une erreur s'est produite. Veuillez réessayer.\"\n        }]);\n        setIsLoading(false);\n      }\n    } else {\n      // Mode API Gradio\n      try {\n        // Vérifier si le client Gradio est déjà initialisé\n        if (gradioClient) {\n          // Utiliser le message système depuis la configuration centralisée\n          const systemMessage = AI_CONFIG.chatbot.systemPrompt;\n          \n          console.log(\"Envoi du message à Gradio:\", userMessageContent);\n          \n          // Appel à l'API Gradio avec gestion des erreurs plus détaillée\n          const result = await gradioClient.predict(0, [\n            userMessageContent,\n            systemMessage,\n          ]);\n\n          console.log(\"Réponse de l'API Gradio:\", result);\n          \n          if (result && result.data) {\n            // Ajouter la réponse de l'assistant (structure adaptée en fonction du format de réponse)\n            setMessages(prev => [...prev, { \n              role: 'assistant', \n              content: Array.isArray(result.data) && result.data.length > 0 \n                ? result.data[0] \n                : (typeof result.data === 'string' \n                    ? result.data \n                    : \"Je suis désolé, je n'ai pas pu générer une réponse. Veuillez réessayer.\")\n            }]);\n          } else {\n            throw new Error(\"Réponse Gradio invalide\");\n          }\n        } else {\n          // Tenter d'initialiser le client dynamiquement\n          try {\n            const gradioModule = await import('@gradio/client');\n            const GradioClient = gradioModule.Client;\n            \n            // Utiliser l'endpoint depuis la configuration centralisée\n            const endpoint = AI_CONFIG.chatbot.apiEndpoint;\n            console.log(\"Tentative de connexion à l'API Gradio:\", endpoint);\n            \n            const client = await GradioClient.connect(endpoint);\n            setGradioClient(client);\n            console.log(\"Connexion au client Gradio réussie\");\n            \n            // Traiter le message après l'initialisation\n            setTimeout(() => {\n              setMessages(prev => [...prev, { \n                role: 'assistant', \n                content: \"Connexion établie. Comment puis-je vous aider ?\"\n              }]);\n              setIsLoading(false);\n            }, 1000);\n            \n            return; // Sortir de la fonction pour éviter d'ajouter un message en double\n          } catch (error) {\n            console.error(\"Impossible d'initialiser le client Gradio:\", error);\n            // Passer en mode local pour les prochaines interactions\n            setForcedLocalMode(true);\n            \n            // Informer l'utilisateur de ce changement\n            setMessages(prev => [...prev, { \n              role: 'assistant', \n              content: \"Je ne peux pas me connecter à l'API en ce moment. Je vais passer en mode hors ligne pour vous aider avec mes connaissances locales.\"\n            }]);\n          }\n        }\n      } catch (error) {\n        console.error(\"Erreur lors de l'appel à l'API:\", error);\n        \n        // Passer en mode local pour les prochaines interactions\n        setForcedLocalMode(true);\n        \n        // Message d'erreur approprié\n        setMessages(prev => [...prev, { \n          role: 'assistant', \n          content: \"Désolé, je rencontre des difficultés avec ma connexion. Je vais passer en mode hors ligne pour continuer à vous aider.\"\n        }]);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  // Envoyer message avec touche Entrée\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <>\n      {/* Bouton flottant pour ouvrir le chat */}\n      <motion.button \n        className=\"fixed bottom-20 right-5 w-14 h-14 rounded-full bg-blue-500 text-white shadow-lg flex items-center justify-center text-2xl z-30\"\n        whileHover={{ scale: 1.1 }}\n        whileTap={{ scale: 0.9 }}\n        onClick={() => setIsOpen(true)}\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n      >\n        💬\n      </motion.button>\n\n      {/* Fenêtre de chat */}\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div \n            className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-30 p-4\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            onClick={() => setIsOpen(false)}\n          >\n            <motion.div \n              className=\"bg-white rounded-2xl shadow-xl w-full max-w-md h-[500px] flex flex-col overflow-hidden\"\n              initial={{ scale: 0.9, y: 20 }}\n              animate={{ scale: 1, y: 0 }}\n              exit={{ scale: 0.9, y: 20 }}\n              onClick={e => e.stopPropagation()}\n            >\n              {/* Header */}\n              <div className=\"flex justify-between items-center px-4 py-3 bg-blue-500 text-white\">\n                <div className=\"flex items-center\">\n                  <span className=\"text-xl mr-2\">🤖</span>\n                  <span className=\"font-bold\">Assistant IKIGAI</span>\n                </div>\n                <button \n                  className=\"text-white hover:bg-blue-600 rounded-full w-8 h-8 flex items-center justify-center\"\n                  onClick={() => setIsOpen(false)}\n                >\n                  ✕\n                </button>\n              </div>\n\n              {/* Messages */}\n              <div className=\"flex-1 overflow-y-auto p-4 bg-gray-50\">\n                {messages.map((message, index) => (\n                  <div \n                    key={index} \n                    className={`mb-3 flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}\n                  >\n                    <div \n                      className={`max-w-[80%] p-3 rounded-lg ${\n                        message.role === 'user' \n                          ? 'bg-blue-500 text-white rounded-tr-none' \n                          : 'bg-white text-gray-800 shadow-sm rounded-tl-none'\n                      }`}\n                    >\n                      {message.content}\n                    </div>\n                  </div>\n                ))}\n                {isLoading && (\n                  <div className=\"flex justify-start mb-3\">\n                    <div className=\"bg-white p-3 rounded-lg shadow-sm rounded-tl-none\">\n                      <div className=\"flex space-x-2\">\n                        <div className=\"w-2 h-2 rounded-full bg-gray-400 animate-bounce\" style={{ animationDelay: \"0ms\" }}></div>\n                        <div className=\"w-2 h-2 rounded-full bg-gray-400 animate-bounce\" style={{ animationDelay: \"200ms\" }}></div>\n                        <div className=\"w-2 h-2 rounded-full bg-gray-400 animate-bounce\" style={{ animationDelay: \"400ms\" }}></div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n                <div ref={messagesEndRef} />\n              </div>\n\n              {/* Input area */}\n              <div className=\"border-t p-3 bg-white\">\n                <div className=\"flex items-center\">\n                  <textarea\n                    className=\"flex-1 border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none\"\n                    placeholder=\"Écrivez votre message...\"\n                    rows=\"2\"\n                    value={inputMessage}\n                    onChange={(e) => setInputMessage(e.target.value)}\n                    onKeyPress={handleKeyPress}\n                  />\n                  <motion.button\n                    className=\"ml-2 bg-blue-500 text-white rounded-full w-10 h-10 flex items-center justify-center\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    onClick={handleSendMessage}\n                    disabled={isLoading || !inputMessage.trim()}\n                  >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                      <line x1=\"22\" y1=\"2\" x2=\"11\" y2=\"13\"></line>\n                      <polygon points=\"22 2 15 22 11 13 2 9 22 2\"></polygon>\n                    </svg>\n                  </motion.button>\n                </div>\n                <div className=\"text-xs text-gray-500 mt-2 text-center\">\n                  {actuallyUseLocalMode ? \"Assistant IKIGAI (Mode hors ligne)\" : \"Propulsé par Gradio API\"}\n                  {forcedLocalMode && \" - Basculement automatique en mode hors ligne\"}\n                </div>\n              </div>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </>\n  );\n};\n\nexport default ChatBot;"],"names":["_ref","useLocalMode","predefinedResponses","isOpen","setIsOpen","useState","isLoading","setIsLoading","messages","setMessages","role","content","inputMessage","setInputMessage","messagesEndRef","useRef","gradioClient","setGradioClient","localResponses","length","forcedLocalMode","setForcedLocalMode","actuallyUseLocalMode","useEffect","async","GradioClient","Client","endpoint","AI_CONFIG","chatbot","apiEndpoint","console","log","client","connect","error","prev","initGradioClient","current","scrollIntoView","behavior","handleSendMessage","trim","userMessage","userMessageContent","setTimeout","randomResponse","Math","floor","random","systemMessage","systemPrompt","result","predict","data","Error","Array","isArray","_jsxs","_Fragment","children","_jsx","motion","button","className","whileHover","scale","whileTap","onClick","initial","opacity","y","animate","AnimatePresence","div","exit","e","stopPropagation","map","message","index","style","animationDelay","ref","placeholder","rows","value","onChange","target","onKeyPress","key","shiftKey","preventDefault","disabled","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x1","y1","x2","y2","points"],"sourceRoot":""}